name: Rust CI

on:
  push:
    branches: [main, develop]
    paths:
      - 'mail_parser_rust/**'
      - '.github/workflows/rust-ci.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'mail_parser_rust/**'
  workflow_dispatch:

env:
  RUST_VERSION: 'stable'
  CARGO_TERM_COLOR: always

jobs:
  # ==========================================
  # Rust Code Quality
  # ==========================================
  rust-quality:
    name: Rust Quality Checks
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            mail_parser_rust/target
          key: cargo-${{ runner.os }}-quality-${{ hashFiles('mail_parser_rust/Cargo.lock') }}
          restore-keys: |
            cargo-${{ runner.os }}-quality-

      - name: Check Rust formatting
        run: |
          cd mail_parser_rust
          cargo fmt --all -- --check

      - name: Run Clippy (linting)
        run: |
          cd mail_parser_rust
          cargo clippy --all-targets --all-features -- -D warnings

      - name: Check for security vulnerabilities
        run: |
          cargo install cargo-audit
          cd mail_parser_rust
          cargo audit

  # ==========================================
  # Rust Tests (Multi-platform)
  # ==========================================
  rust-tests:
    name: Rust Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, nightly]
        exclude:
          # Only run nightly on Ubuntu to save CI time
          - os: windows-latest
            rust: nightly
          - os: macos-latest
            rust: nightly

    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            mail_parser_rust/target
          key: cargo-${{ runner.os }}-${{ matrix.rust }}-${{ hashFiles('mail_parser_rust/Cargo.lock') }}

      - name: Build Rust project
        run: |
          cd mail_parser_rust
          cargo build --verbose

      - name: Run Rust tests
        run: |
          cd mail_parser_rust
          cargo test --verbose --all-features

      - name: Run doc tests
        run: |
          cd mail_parser_rust
          cargo test --doc

  # ==========================================
  # Code Coverage (Rust)
  # ==========================================
  rust-coverage:
    name: Rust Code Coverage
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            mail_parser_rust/target
          key: cargo-${{ runner.os }}-coverage-${{ hashFiles('mail_parser_rust/Cargo.lock') }}

      - name: Generate coverage
        run: |
          cd mail_parser_rust
          cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: mail_parser_rust/lcov.info
          flags: rust
          name: rust-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  # ==========================================
  # Benchmarks
  # ==========================================
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            mail_parser_rust/target
          key: cargo-${{ runner.os }}-bench-${{ hashFiles('mail_parser_rust/Cargo.lock') }}

      - name: Run benchmarks
        run: |
          cd mail_parser_rust
          cargo bench --no-fail-fast | tee bench-output.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: mail_parser_rust/bench-output.txt

  # ==========================================
  # Build PyO3 Extension (Cross-platform)
  # ==========================================
  build-pyo3:
    name: Build PyO3 Extension (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11', '3.12']

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install maturin
        run: pip install maturin

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            mail_parser_rust/target
          key: cargo-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('mail_parser_rust/Cargo.lock') }}

      - name: Build wheel
        run: |
          cd mail_parser_rust
          maturin build --release --strip --interpreter python${{ matrix.python-version }}

      - name: Install and test wheel
        run: |
          pip install mail_parser_rust/target/wheels/*.whl
          python -c "import mail_parser_rust; print('Successfully imported mail_parser_rust')"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
          path: mail_parser_rust/target/wheels/*.whl

  # ==========================================
  # Dependency Audit
  # ==========================================
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: |
          cd mail_parser_rust
          cargo audit --deny warnings

      - name: Check for outdated dependencies
        run: |
          cargo install cargo-outdated
          cd mail_parser_rust
          cargo outdated --exit-code 1 || echo "Some dependencies are outdated"
